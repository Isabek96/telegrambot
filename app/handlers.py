from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

import app.keyboards as kb

router = Router()


class Reg(StatesGroup):
    name = State()
    number = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ GIF
    gif_url = "https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExam9jY2E3M2tkb2VyOW5hNHBlZGx5OWVneW10dm5vYWJlZXJzMDRzeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/u8BOqJz4hRQJj8fBMz/giphy.gif"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ GIF —Å –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–∏
    await message.answer_animation(gif_url)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ‚Äî –Ø –ò–ò-–±–æ—Ç –Æ–∂–Ω–æ–≥–æ –ü–æ–ª–µ–≤–æ–¥–∞. ü§ñüå±\n'
        '–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.\n\n'
        '–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n'
        '‚úÖ –ü–æ–¥–±–æ—Ä —Å–µ–º—è–Ω –∏ —É–¥–æ–±—Ä–µ–Ω–∏–π\n'
        '‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫—É–ª—å—Ç—É—Ä–∞–º–∏\n'
        '‚úÖ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
        reply_markup=kb.settings
    )

    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.catalog_kb)


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")


@router.message(F.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def greeting_1(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!")


@router.message(F.text.lower() == "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ")
async def greeting_2(message: Message):
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!")


# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@router.callback_query(F.data == 'contacts')
async def cmd_contact(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=await kb.inline_contact())
    await callback.answer()


@router.callback_query(F.data == 'city_–ê–ª–º–∞—Ç—ã')
async def cmd_contact_alma(callback: CallbackQuery):
    await callback.message.edit_text('–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤', reply_markup=await kb.contact_number_almaty())
    await callback.answer()


# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == "catalog")
async def cmd_catalog(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–Ω–∞ –∏ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=await kb.inline_menu_1())
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')  # –ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä—ã—Ç—å callback


@router.callback_query(F.data == "–û—Ç–∫—Ä—ã—Ç—ã–π –≥—Ä—É–Ω—Ç")
async def show_otkrytyj_grunt(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –≥—Ä—É–Ω—Ç–∞:",
                                     reply_markup=await kb.inline_menu_otk_grunt())
    await callback.answer()


@router.callback_query(F.data == "–ó–∞–∫—Ä—ã—Ç—ã–π –≥—Ä—É–Ω—Ç")
async def show_zaktiti_grunt(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ó–∞–∫—Ä—ã—Ç–æ–≥–æ –≥—Ä—É–Ω—Ç–∞:",
                                     reply_markup=await kb.inline_menu_zakr_grunt())
    await callback.answer()


@router.callback_query(F.data == '–£–¥–æ–±—Ä–µ–Ω–∏—è')
async def show_zaktiti(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–Ω–∞ –∏ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                                     reply_markup=await kb.inline_menu_udobrenie())
    await callback.answer()


# –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–Ω–∞ –∏ —É–¥–æ–±—Ä–µ–Ω–∏—è –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=await kb.inline_menu_1())
    await callback.answer()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "go_home")
async def go_home(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.catalog_kb)
    await callback.answer()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
@router.message(Command('reg'))
async def cmd_register(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è')


@router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer(('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'))


@router.message(Reg.number)
async def reg_three(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    data = await state.get_data()
    await message.answer(f'–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–ò–º—è:{data["name"]}\n–ù–æ–º–µ—Ä:{data["number"]}')
    await state.clear()
